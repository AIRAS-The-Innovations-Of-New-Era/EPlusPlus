WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

program = { SOI ~ ( (statement | function_definition | class_definition) ~ (WHITESPACE* ~ COMMENT*) )* ~ EOI }

statement = { assignment | print_statement | if_statement | while_statement | for_statement | function_definition | class_definition | return_statement | expression_statement | break_statement | continue_statement | pass_statement | try_statement | raise_statement | with_statement }
expression_statement = { expression }

assignment_operator = @{ "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "**=" | "//=" | "&=" | "|=" | "^=" | ">>=" | "<<=" }
assignment = { assign_target ~ assignment_operator ~ expression }
assign_target = { identifier ~ ("." ~ identifier)* }

print_statement = { "print" ~ "(" ~ argument_list? ~ ")" }

if_statement = { "if" ~ expression ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block ~ elif_clause* ~ else_clause? }
elif_clause = { "elif" ~ expression ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }
else_clause = { "else" ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }

while_statement = { "while" ~ expression ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }

for_statement = { "for" ~ for_target ~ "in" ~ expression ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }

// For loop targets - can be single identifier or tuple unpacking
for_target = { identifier | for_tuple_unpacking }
for_tuple_unpacking = { identifier ~ ("," ~ identifier)+ }

NEWLINE = _{ "\r"? ~ "\n" }
INDENT = { "@INDENT@" }
DEDENT = { "@DEDENT@" }

block = { (WHITESPACE* ~ COMMENT*)? ~ INDENT ~ indented_statements ~ DEDENT | (WHITESPACE* ~ COMMENT*)? ~ INDENT ~ DEDENT }
indented_statements = { (statement | function_definition | class_definition)+ }

expression = _{ logical_or }

logical_or_op = @{ "or" }
logical_or = { logical_and ~ (logical_or_op ~ logical_and)* }

logical_and_op = @{ "and" }
logical_and = { logical_not_expr ~ (logical_and_op ~ logical_not_expr)* }

logical_not_op = @{ "not" }
logical_not_expr = { logical_not_op ~ logical_not_expr | comparison_identity_membership }

// Combined comparison, identity, and membership operators
comparison_identity_membership = { bitwise_or ~ (comp_ident_member_op ~ bitwise_or)* }
comp_ident_member_op = @{ "==" | "!=" | ">=" | "<=" | ">" | "<" | "is not" | "is" | "not in" | "in" }

bitwise_or_op = @{ "|" }
bitwise_or = { bitwise_xor ~ (bitwise_or_op ~ bitwise_xor)* }

bitwise_xor_op = @{ "^" }
bitwise_xor = { bitwise_and ~ (bitwise_xor_op ~ bitwise_and)* }

bitwise_and_op = @{ "&" }
bitwise_and = { shift ~ (bitwise_and_op ~ shift)* }

shift_op = @{ "<<" | ">>" }
shift = { add_sub ~ (shift_op ~ add_sub)* }

add_sub = { mul_div_mod ~ (add_op ~ mul_div_mod)* }
add_op = @{ "+" | "-" }

mul_div_mod = { unary_plus_minus ~ (mul_op ~ unary_plus_minus)* } // Changed to include unary +/-
mul_op = @{ "*" | "//" | "/" | "%" }

unary_plus_minus_op = @{ "+" | "-" }
unary_plus_minus = { unary_plus_minus_op ~ unary_bitwise_not_power | unary_bitwise_not_power }

unary_bitwise_not_op = @{ "~" }
// Power and unary bitwise NOT have similar precedence, handled by structure.
// Unary + and - are now handled above with higher precedence.
// For now, ~ is grouped with power. 'not' is higher.
unary_bitwise_not_power = { unary_bitwise_not_op ~ power | power }

power = { factor ~ (pow_op ~ factor)* }
pow_op = @{ "**" }

atom = {
    lambda_expression |
    generator_expression |
    list_literal |
    tuple_literal |
    dict_literal |
    set_literal |
    frozenset_literal |
    complex_literal |
    float_literal |
    integer_literal |
    string_literal |
    none_literal |
    identifier |
    "(" ~ expression ~ ")"
}

// factor rule is now just { atom }
factor = { atom ~ (call_suffix | attr_access | index_access)* }

call_suffix = { "(" ~ argument_list? ~ ")" }
attr_access = { "." ~ identifier }
index_access = { "[" ~ expression ~ "]" }
lambda_expression = { "lambda" ~ parameter_list? ~ ":" ~ expression }
argument_list = { argument ~ ("," ~ argument)* }
argument = { generator_expression_no_parens | expression }
generator_expression_no_parens = { expression ~ comprehension_for }
keyword_argument = { identifier ~ "=" ~ expression }

float_literal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
integer_literal = @{ ASCII_DIGIT+ }
string_literal = @{ "\"" ~ (double_quoted_char*) ~ "\"" | "'" ~ (single_quoted_char*) ~ "'" }
none_literal = @{ "None" } // Added for None
double_quoted_char = { escape_sequence | !("\"" | "\\") ~ ANY }
single_quoted_char = { escape_sequence | !("'" | "\\") ~ ANY }
escape_sequence = { "\\" ~ ("n" | "t" | "r" | "b" | "f" | "v" | "0" | "\\" | "\"" | "'" | "a") }
// Keywords that should not be parsed as identifiers - must be complete words
keyword = @{ ("if" | "elif" | "else" | "while" | "for" | "def" | "class" | "return" | "break" | "continue" | "pass" | "try" | "except" | "finally" | "raise" | "and" | "or" | "not" | "in" | "is" | "None" | "True" | "False" | "lambda" | "as" | "print" | "with") ~ !(ASCII_ALPHANUMERIC | "_") }

identifier = @{ !keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

function_definition = { decorator* ~ "def" ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }
parameter_list = { identifier ~ ("," ~ identifier)* }

decorator = { "@" ~ decorator_name ~ decorator_args? }
decorator_name = { identifier }
decorator_args = { "(" ~ argument_list? ~ ")" }

return_statement = { "return" ~ expression? }

break_statement = { "break" }
continue_statement = { "continue" }
pass_statement = { "pass" }

list_literal = { "[" ~ (list_comprehension | (expression ~ ("," ~ expression)*)?) ~ "]" }
tuple_literal = { "(" ~ expression ~ ("," ~ expression)+ ~ ")" }
dict_literal = { "{" ~ (dict_comprehension | (dict_entry ~ ("," ~ dict_entry)*)?) ~ "}" }
dict_entry = { expression ~ ":" ~ expression }
set_literal = { "{" ~ (set_comprehension | (expression ~ ("," ~ expression)*)) ~ "}" }
frozenset_literal = { "frozenset" ~ "(" ~ list_literal ~ ")" }
complex_literal = { "complex" ~ "(" ~ expression ~ "," ~ expression ~ ")" }

// Comprehensions
list_comprehension = { expression ~ comprehension_for }
dict_comprehension = { expression ~ ":" ~ expression ~ comprehension_for }
set_comprehension = { expression ~ comprehension_for }
generator_expression = { "(" ~ expression ~ comprehension_for ~ ")" }

comprehension_for = { "for" ~ comprehension_target ~ "in" ~ expression ~ comprehension_if* }
comprehension_target = { identifier ~ ("," ~ identifier)* | identifier }
comprehension_if = { "if" ~ expression }

class_definition = { "class" ~ identifier ~ ("(" ~ identifier ~ ")")? ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }

try_statement = { "try" ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block ~ except_clause+ ~ try_else_clause? ~ finally_clause? }
except_clause = { "except" ~ (expression)? ~ ("as" ~ identifier)? ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }
try_else_clause = { "else" ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }
finally_clause = { "finally" ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }
raise_statement = { "raise" ~ expression? }

with_statement = { "with" ~ with_item ~ ("," ~ with_item)* ~ ":" ~ (WHITESPACE* ~ COMMENT*)? ~ block }
with_item = { expression ~ ("as" ~ identifier)? }
