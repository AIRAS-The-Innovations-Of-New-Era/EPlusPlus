x = 42
print(x)
print(123)
y = x + 5
print(y)
print(1 + 2 * 3)

print("yo welcome from e++")

# Arithmetic operators
print(10 % 3)      # Expected: 1
print(2 ** 4)      # Expected: 16
print(10 // 3)     # Expected: 3
print(11 // 3)     # Expected: 3
print(5 ** 2 % 3)  # Expected: 1 (25 % 3)
print(2 * 3 ** 2)  # Expected: 18 (2 * 9)

# Comparison operators
print(10 == 10)    # Expected: 1 (true)
print(10 == 5)     # Expected: 0 (false)
print(10 != 5)     # Expected: 1 (true)
print(10 != 10)    # Expected: 0 (false)
print(10 > 5)      # Expected: 1 (true)
print(5 > 10)      # Expected: 0 (false)
print(10 < 20)     # Expected: 1 (true)
print(20 < 10)     # Expected: 0 (false)
print(10 >= 10)    # Expected: 1 (true)
print(10 >= 11)    # Expected: 0 (false)
print(10 <= 10)    # Expected: 1 (true)
print(10 <= 9)     # Expected: 0 (false)
print(x == 42)     # Expected: 1 (true)
print(y != x + 5)  # Expected: 0 (false)

# Assignment operators
a = 10
print(a)      # Expected: 10
a += 5
print(a)      # Expected: 15
a -= 3
print(a)      # Expected: 12
a *= 2
print(a)      # Expected: 24
a /= 4 # C++ truncates, Python floors for positive. For 24/4=6, same.
print(a)      # Expected: 6
b = 25
b %= 4
print(b)      # Expected: 1
c = 2
c **= 3
print(c)      # Expected: 8
d = 17
d //= 5 # C++ truncates, Python floors. For 17/5=3 (C++), 17//5=3 (Py), same.
print(d)      # Expected: 3

# Logical Operators
print(1 and 0)     # Expected: 0 (false)
print(1 and 1)     # Expected: 1 (true)
print(0 and 0)     # Expected: 0 (false)
print(1 or 0)      # Expected: 1 (true)
print(0 or 1)      # Expected: 1 (true)
print(0 or 0)      # Expected: 0 (false)
print(not 1)       # Expected: 0 (false)
print(not 0)       # Expected: 1 (true)
print(x == 42 and y == 47) # Expected: 1 (true)
print(x == 42 or y == 0)   # Expected: 1 (true)
print(not (x == 0))        # Expected: 1 (true)

# Bitwise Operators
print(6 & 3)       # Expected: 2  (110 & 011 = 010)
print(6 | 3)       # Expected: 7  (110 | 011 = 111)
print(6 ^ 3)       # Expected: 5  (110 ^ 011 = 101)
print(~6)          # Expected: -7 (depends on C++ int representation, typically two's complement)
print(3 << 2)      # Expected: 12 (011 << 2 = 1100)
print(12 >> 2)     # Expected: 3  (1100 >> 2 = 0011)

# Identity Operators (Placeholder - C++ compares values for primitives)
val1 = 100
val2 = 100
# val3 = val1 # Not supported yet, would require proper variable handling for 'is'
print(val1 is val2) # Expected: 1 (true) due to value comparison in C++ for primitives
print(val1 is not val2) # Expected: 0 (false)

# Membership Operators (Placeholder - C++ string.find for strings)
str_a = "hello world"
str_b = "world"
str_c = "earth"
print(str_b in str_a)     # Expected: 1 (true) - Placeholder behavior
print(str_c in str_a)     # Expected: 0 (false) - Placeholder behavior
print(str_b not in str_a) # Expected: 0 (false) - Placeholder behavior
print(str_c not in str_a) # Expected: 1 (true) - Placeholder behavior

# Bitwise Assignment Operators
bit_val = 6 # 110
bit_val &= 3 # 110 & 011 = 010 (2)
print(bit_val) # Expected: 2
bit_val = 6
bit_val |= 3 # 110 | 011 = 111 (7)
print(bit_val) # Expected: 7
bit_val = 6
bit_val ^= 3 # 110 ^ 011 = 101 (5)
print(bit_val) # Expected: 5
bit_val = 3 # 011
bit_val <<= 2 # 01100 (12)
print(bit_val) # Expected: 12
bit_val = 12 # 1100
bit_val >>= 2 # 0011 (3)
print(bit_val) # Expected: 3

print("Operator tests complete.")
